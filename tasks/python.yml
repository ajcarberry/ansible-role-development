---

- name: Install python build requirements
  become: true
  package:
    name: "{{ python_build_requirements }}"
    state: present
    update_cache: true

- name: Clone pyenv
  git:
    repo: https://github.com/pyenv/pyenv.git
    dest: "{{ pyenv_root }}"
    version: "{{ pyenv_version }}"

- name: Make sure .pyenv directory exists
  file:
    path: "{{ pyenv_root }}"
    state: directory
    mode: "0755"

- name: Create .pyenvrc
  template:
    src: "pyenvrc.j2"
    dest: "{{ pyenv_root }}/.pyenvrc"
    mode: "0644"

- name: Set path to .bashrc
  set_fact:
    pyenv_bashrc_path: "{{ pyenv_home }}/.bashrc"
  when: pyenv_bashrc_path is undefined

- name: Check whether .bashrc file exists
  stat:
    path: "{{ pyenv_bashrc_path }}"
  register: pyenv_bashrc_st

- name: Resolve .bashrc symlink
  set_fact:
    pyenv_bashrc_path: "{{ pyenv_bashrc_st.stat.lnk_source }}"
  when: pyenv_bashrc_st.stat.exists and pyenv_bashrc_st.stat.islnk

- name: Check whether .pyenvrc is loaded in .bashrc
  command: grep -EFq 'source $HOME/.pyenv/.pyenvrc' {{ pyenv_bashrc_path }}
  register: check_bashrc
  ignore_errors: true
  changed_when: false
  failed_when: false
  when: pyenv_bashrc_st.stat.exists

- name: Load pyenv in .bashrc
  blockinfile:
    dest: "{{ pyenv_bashrc_path }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: pyenv"
    block: |
      if [ -e "$HOME/.pyenv/.pyenvrc" ]; then
        source $HOME/.pyenv/.pyenvrc
        if [ -e "$HOME/.pyenv/completions/pyenv.bash" ]; then
          source $HOME/.pyenv/completions/pyenv.bash
        elif [ -e "/usr/local/opt/pyenv/completions/pyenv.bash" ]; then
          source /usr/local/opt/pyenv/completions/pyenv.bash
        fi
      fi
  when: pyenv_bashrc_st.stat.exists and check_bashrc.rc != 0

- name: Install Python interpreters
  shell: >-
    . {{ pyenv_root }}/.pyenvrc &&
    pyenv install {{ item }}
  args:
    executable: "{{ pyenv_install_shell | default(omit) }}"
    creates: "{{ pyenv_root }}/versions/{{ item }}/bin/python"
  with_items: "{{ pyenv_python_versions }}"
  environment: "{{ pyenv_install_environment }}"

- name: Get current global version
  shell: >-
    . {{ pyenv_root }}/.pyenvrc &&
    pyenv global
  args:
    executable: "{{ pyenv_install_shell | default(omit) }}"
  register: pyenv_global_version
  changed_when: false

- name: Set pyenv_global_active fact
  set_fact:
    pyenv_global_active: "{{ pyenv_global_version.stdout_lines |
      join(' ') | trim() }}"

- name: Check if 'system' version is available
  shell: >-
    set -o pipefail &&
    . {{ pyenv_root }}/.pyenvrc &&
    pyenv versions | grep -q system
  args:
    executable: "{{ pyenv_install_shell | default(omit) }}"
  register: pyenv_versions_grep_system
  changed_when: false
  failed_when: false
  when: "'system' in pyenv_global"

- name: Remove 'system' from pyenv_global
  set_fact:
    pyenv_global: "{{ pyenv_global | replace('system', '') | trim() }}"
  when: "'system' in pyenv_global and pyenv_versions_grep_system.rc != 0"

- name: Set pyenv global version to '{{ pyenv_global }}'
  shell: >-
    . {{ pyenv_root }}/.pyenvrc &&
    pyenv global {{ pyenv_global }} &&
    pyenv rehash
  args:
    executable: "{{ pyenv_install_shell | default(omit) }}"
  when: "pyenv_global is defined and pyenv_global_active != pyenv_global"

- name: Install pipenv for Python 3
  pip:
    name: pipenv
    executable: pip3
    extra_args: --user

- name: Install pipx for Python 3
  pip:
    name: pipx
    executable: pip3
    extra_args: --user

- name: Add pipx to PATH
  command: 
    cmd: python3 -m pipx ensurepath
    warn: no
  ignore_errors: yes
